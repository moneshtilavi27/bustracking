let pkg,JwtService,CustomErrorHandler,getCount,getData,insertData,bcrypt,Joi,md5,imageUpload;_dae‍.x([["default",()=>_dae‍.o]]);_dae‍.w("joi",[["default",["pkg","Joi"],function(v){pkg=Joi=v}]]);_dae‍.w("../../service/index.js",[["JwtService",["JwtService"],function(v){JwtService=v}],["CustomErrorHandler",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_dae‍.w("../../config/index.js",[["getCount",["getCount"],function(v){getCount=v}],["getData",["getData"],function(v){getData=v}],["insertData",["insertData"],function(v){insertData=v}]]);_dae‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_dae‍.w("md5",[["default",["md5"],function(v){md5=v}]]);_dae‍.w("../../helper/imageUpload.js",[["default",["imageUpload"],function(v){imageUpload=v}]]);
const { array, exist } = pkg;







const registerController = {

    async register(req, res, next) {
        let query = "";
        let cond = '';
        let image = {};

        // validation  code comming from user
        const registerSchema = Joi.object({
            id: Joi.number().integer(),
            name: Joi.string().allow(''),
            address: Joi.string().allow(''),
            phone: Joi.number().integer().min(10).allow(''),
            organization: Joi.string().allow(''),
            goshala: Joi.string().allow(''),
            dob: Joi.string().allow(''),
            pincode: Joi.when('id', {
                is: Joi.number().integer().required(),
                then: Joi.string().min(6),
                otherwise: Joi.number().integer().min(6).required(),
            }),
            userType: Joi.when('id', {
                is: Joi.string().required(),
                then: Joi.string(),
                otherwise: Joi.string().required(),
            }),
            dist: Joi.string().allow(''),
            state: Joi.string().allow(''),
            taluka: Joi.string().allow(''),
            center: Joi.string().allow(''),
            rural_urban: Joi.string().allow(''),
            Electronic_id: Joi.string().allow(''),
            email: Joi.string().email().allow(''),
            aadhar: Joi.number().integer().allow(''),
            isProfileUploaded: Joi.number().integer(),
            tfLiteSyncher: Joi.string().allow(''),
            isVerified: Joi.string().allow(''),
            isSignedUploaded: Joi.number().integer(),
            vetRegNo: Joi.string().allow(''),
            modified: Joi.string().allow('').default('0000-00-00 00:00:00'),
            login_status: Joi.string().allow(''),
            created_by: Joi.string().allow(''),
            client_id: Joi.string().allow(''),
            syncer: Joi.number().integer().required(),
            password: Joi.when('id', {
                is: Joi.number().integer().required(),
                then: Joi.string().pattern(new RegExp('^[a-zA-Z0-9]{3,30}$')),
                otherwise: Joi.string().pattern(new RegExp('^[a-zA-Z0-9]{3,30}$')).required(),
            }),
            // role: Joi.string().min(3).max(30).required(),
            repeat_password: Joi.ref('password'),
        });

        await imageUpload(req, res, async function (err) {
            if (err) {
                // An error occurred when uploading 
                _dae‍.g.console.log(err.field);
                err.field === 'user_profile_image' && (image.isProfileUploaded = 0);
                err.field === 'user_signature' && (image.isSignedUploaded = 0);
                _dae‍.g.console.log(err);
            }
            // image.image = req.files && req.files[0].originalname;
            req.files.user_profile_image && (image.isProfileUploaded = 1);
            req.files.user_signature && (image.isSignedUploaded = 1);

            // syncher query
            let syncher = await getCount("SELECT IF(MAX(`syncer`)IS NULL,1,MAX(`syncer`+1)) AS `syncer` FROM `addowner`;", next);

            let obj = { ...req.body, ...syncher, ...image }
            const { error } = registerSchema.validate(obj);
            if (error) {
                return next(error);
            }
            obj.password && (obj.password = md5(obj.password));

            // cheack if user alredy exist
            let query = "SELECT * FROM `addowner` WHERE `phone` = '" + obj.phone + "';";
            await getData(query, next).then(async (data) => {
                if (data.length > 0) {
                    return next(CustomErrorHandler.alreadyExist("This phone Number already exist"));
                } else {
                    query = obj && obj.id ? "UPDATE `addowner` SET ? WHERE `id` ='" + obj.id + "'" : "INSERT INTO `addowner` SET ?";

                    await insertData(query, obj, next).then((data) => {
                        res.json(
                            {
                                message: obj && obj.id ? "Data Updated Successfully" : "Data Inserted Successfully",
                                data: obj,
                            }
                        )
                    }).catch((err) => {
                        next(err)
                    });
                }
            });
        });
    }
}


_dae‍.d(registerController);